#include <stdio.h>
#include <stdlib.h>

int main()
{
    int valor;
    int *p1;
    float temp;
    float *p2;
    char aux;
    char *nome = "Ponteiros";
    char *p3;
    int idade;
    int vetor[3];
    int *p4;
    int *p5;
    /* (a) */
    valor = 10;
    p1 = &valor;
    *p1 = 20;
    printf("%d \n", valor);
    // O programa imprime 20, pois ao usar "*p1=20", usando o operador dereferencia "*" fez com que o
    //conteudo da variavel "valor" fosse alterado.
    /* (b) */
  temp = 26.5;
  p2 = &temp;
  *p2 = 29.0;
  printf("%.1f \n", temp);
    // O programa imprime 29.0, pois ao usar "*p2=29.0", usando o operador dereferencia "*" fez com
    //que o conteudo da variavel "temp" fosse alterado.


  /* (c) */
  p3 = &nome[0];
  aux = *p3;
  printf("%c \n", aux);
  // o programa imprimr a "P", que é nome [0], pois o ponteiro p3 recebeu o endereco de memoria de nome[0]
  // e a variavel aux recebeu o conteudo do ponteiro
  /* (d) */
  p3 = &nome[4];
  aux = *p3;
  printf("%c \n", aux);
 // o programa imprimr a "e", que é nome [4], pois o ponteiro p3 recebeu o endereco de memoria de nome[4]
 //e a variavel aux recebeu o conteudo do ponteiro
  /* (e) */
  p3 = nome;
  printf("%c \n", *p3);
 // o programa imprimr a "P", que é nome [0], pois o ponteiro p3 recebeu o "nome", e por se tratar de uma variavel
 //char, ao mandar imprimir o conteudo do ponteiro sem um laço de repeticao é exibido apenas o primeiro elemento do
 //array.
  /* (f) */
  p3 = p3 +4;
  printf("%c \n", *p3);
  // o programa imprimr a "e" que é igual a nome[4]=p3[4],pois ao declarar "  p3 = p3 +4;"==>   p3 = p3[0 +4] ==> p3[4];"
  /* (g) */
  p3--;
  printf("%c \n", *p3);
  // o programa imprimr a "t" que é igual a nome[3]=p3[3],pois ao declarar "  p3 = p3 +4;"==>   p3 = p3[0 +4] ==> p3[4]
  // e ao fazer "p3--", temos "p3=p3-1;", logo p3=p3[4-1] ==>p3[3];

  /* (h) */
  vetor[0] = 31;
  vetor[1] = 45;
  vetor[2] = 27;
  p4 = vetor;
  idade = *p4;
  printf("%d \n", idade);
  // o programa exibe "31", pois p4 recebeu "vetor" e "idade" recebeu o conteudo de p4, ao imprimir idade o programa esta
  //imprimindo o primeiro elemento do vetor valor
  /* (i) */
  p5 = p4 +1;
  idade = *p5;
  printf("%d \n", idade);
// o programa exibe "45", pois p5 recebeu "p4 +1 "==> p4[0+1]== >p4[1] , ao imprimir "idade" o programa esta imprimindo o
//segundo elemento do vetor valor

  /* (j) */
  p4 = p5 +1;
  idade = *p4;
  printf("%d \n", idade);
  // o programa exibe "27", pois p4 recebeu "p5 +1 "==> p4[1+1]== >p4[2] , ao imprimir "idade" o programa esta imprimindo
  // o terceiro elemento do vetor valor
  /* (l) */
  p4 = p4 -2;
  idade = *p4;
  printf("%d \n", idade);
  // o programa exibe "31", pois p4 recebeu "p4-2 "==> p4[2-2]== >p4[0] , ao imprimir "idade" o programa esta imprimindo
  //o primeiro elemento do vetor valor

    /* (m) */
    p4 = &vetor[1];
    p5 = &vetor[2] - 1;
    printf("%d \n", *p5);
  // o programa exibe "45", pois p5 recebeu o endereco de "vetor[2] - 1"==> vetor[2-1]== >vetor[1] , o programa esta imprimindo
  // conteudo de p5 que é o segunado elemento do vetor valor

    /* (n) */
    p5++;
    printf("%d \n", *p5);
    // o programa exibe "27", pois  "p5++"==>p5+1== > vetor[1+1] , o programa esta imprimindo  conteudo de p5 que é o terceiro
    //elemento do vetor valor

    return 0;
}
